{"version":3,"sources":["Images/empty-heart.svg","Images/filled-heart.svg","components/Nav.js","components/Home.js","components/About.js","components/InfoBox/InfoBox.js","components/util.js","components/Map/Map.js","components/Tracker/Tracker.js","components/Table/Table.js","components/LineGraph.js","components/Graph.js","App.js","serviceWorker.js","index.js","Images/covid-19.png","Images/CovidVault.png","Images/me.jpg"],"names":["module","exports","Nav","to","src","img","className","alt","style","color","textDecoration","fontWeight","Home","About","InfoBox","title","cases","active","total","props","Card","onClick","CardContent","Typography","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","favorite","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","backgroundImage","flag","showDataOnMap","Tracker","useState","setCountries","setCountry","setCountryInfo","setTableData","lng","mapCenter","setMapCenter","mapZoom","mapCountries","setMapCountries","setCasesType","useEffect","fetch","then","resp","json","response","name","value","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Table","forEach","entry","localStorage","getItem","setItem","JSON","stringify","parse","tableData","setState","setAsFav","favorites","push","state","item","this","key","height","width","filledHeart","emptyHeart","React","Component","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","LineGraph","setData","fetchData","length","datasets","backgroundColor","borderColor","Graph","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.68357d5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty-heart.0984040e.svg\";","module.exports = __webpack_public_path__ + \"static/media/filled-heart.88bf2af2.svg\";","import React from 'react';\nimport '../App.css';\nimport { Link } from 'react-router-dom';\nimport img from '../Images/covid-19.png';\n\nfunction Nav() {\n    return (\n        <nav>\n            <Link to='/'>\n                <img src={img} className=\"top-nav-icon\" alt=\"icon\"/>\n            </Link>\n            <div className=\"nav-links\">\n                <Link to='/about' style={{color: \"white\", textDecoration: \"none\", fontWeight:\"bold\"}}>\n                    <li>About</li>\n                </Link>\n                <Link to='/tracker' style={{color: \"white\", textDecoration: \"none\", fontWeight:\"bold\"}}>\n                    <li>Tracker</li>\n                </Link>\n                <Link to='/graph' style={{color: \"white\", textDecoration: \"none\", fontWeight:\"bold\"}}>\n                    <li>Graph</li>\n                </Link>\n            </div>\n           \n        </nav>\n    )\n}\n\nexport default Nav\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport img from '../Images/CovidVault.png';\n\n\nfunction Home() {\n\n    \n     return (\n         <div className=\"home-column\">\n             \n            <div className=\"title\">\n                <img className=\"image\" src={img} alt=\"title\"/>\n            </div>\n            <br></br>\n            <Link to=\"/tracker\"> \n                <div className=\"pulse\">\n                    <span></span>\n                    <span></span>\n                </div>\n            </Link>\n         </div>\n    )\n}\n\nexport default Home\n","import React from 'react'\nimport '../App.css'\nimport img from '../Images/me.jpg';\n\nfunction About() {\n    return (\n        <div className=\"about_header\">\n            <h1>About Page</h1>\n            <br></br>\n            <br></br>\n            <br></br>\n\n            <div className=\"row\">\n                \n                    <div className=\"card-left\">\n                        <img src={img} alt=\"karan\" />\n                    </div>\n                \n                    <div className=\"card-right\">\n                        <h2>What is Covid-Vault?</h2>\n                        <br></br>\n                        <br></br>\n                        <br></br>\n                        <h3>\n                            <ul>\n                                <li>\n                                    Covid-Vault is an app that tracks and visualizes data regarding the Covid-19 Pandemic.\n                                </li>\n                                <br></br>\n                                <li>\n                                    A user is able to view data regarding active covid-19 cases, recovered cases, and deaths, by country.\n                                </li>\n                                <br></br>\n                                <li>\n                                    The tracker shows data in a worldwide map view.\n                                </li>\n                                <br></br>\n                                <li>\n                                    The graph displays data in a table, listing countries and how many total live cases they have, from greatest to least.\n                                </li>\n                                <br></br>\n                                <li>\n                                    The graph also shows a line graph with data regarding the additional new active cases, recovered cases, or deaths per day, over the past 120 days. \n                                </li>\n                            </ul>\n                        </h3>\n                        <br></br>\n                        <br></br>\n                        <br></br>\n                        <br></br>\n                        <h4>\n                            As a student in Flatiron's fulltime immersive software engineering program, I had a lot of fun building this project. I always had an idea about this since day 1 and it feels great to see it come to fruition.\n                        </h4>\n                        \n                        \n                    </div>\n            </div>\n\n        </div>\n        \n    )\n}\n\nexport default About","import React from 'react';\nimport './InfoBox.css';\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nfunction InfoBox({ title, cases, active, total, ...props }) {\n    return (\n        <Card className={`infoBox ${active && 'infoBox--selected'}`} onClick={props.onClick}>\n            <CardContent>\n                <Typography className=\"infoBox_title\" color=\"textSecondary\">\n                    {title}\n                </Typography>\n                <h2 className=\"infoBox_cases\">{cases}</h2>\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">\n                    Total Cases: {total}\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n};\n\nexport default InfoBox;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#de6b23\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if ((a.favorite && b.favorite) || (!a.favorite && !b.favorite)) {\n      return b.cases - a.cases;\n    } else if (a.favorite) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"../util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;","import React, { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select } from \"@material-ui/core\";\nimport './Tracker.css';\nimport InfoBox from '../InfoBox/InfoBox';\nimport Map from '../Map/Map';\nimport { sortData, prettyPrintStat } from '../util';\nimport \"leaflet/dist/leaflet.css\";\n\n\nfunction Tracker() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({\n    lat: 34.80746,\n    lng: -40.4796\n  });\n  const [mapZoom, setMapZoom] = useState(4);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(resp => resp.json())\n    .then(data => {\n      setCountryInfo(data);\n    })\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then(response => response.json())\n      .then(data => {\n        const countries = data.map(country => ({\n          name: country.country,\n          value: country.countryInfo.iso2\n        }));\n\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      })\n    }\n    getCountriesData();\n  }, [])\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide' \n      ? 'https://disease.sh/v3/covid-19/all' \n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    await fetch(url)\n    .then(resp => resp.json())\n    .then(data => {\n      setCountry(countryCode); \n      setCountryInfo(data);\n\n      countryCode === \"worldwide\"\n          ? \n          setMapCenter([34.80746, -40.4796])\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n    })\n  }\n\n  return (\n    <div className=\"app_tracker\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID TRACKER</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map(country => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select> \n          </FormControl>\n        </div>\n\n        <div className=\"app_stats\">\n          <InfoBox active={casesType === \"cases\"} onClick={e => setCasesType('cases')} title=\"Active Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\n\n          <InfoBox active={casesType === \"recovered\"} onClick={e => setCasesType('recovered')} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}/>\n\n          <InfoBox active={casesType === \"deaths\"} onClick={e => setCasesType('deaths')} title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\n        </div>\n\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n      </div>\n    </div>\n  );\n}\n\nexport default Tracker;","import React from 'react';\nimport numeral from 'numeral';\nimport './Table.css';\nimport { sortData } from '../util';\nimport emptyHeart from '../../Images/empty-heart.svg';\nimport filledHeart from '../../Images/filled-heart.svg';\n\nclass Table extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tableData: []\n        }\n        \n    }\n\n    \n    getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then(response => response.json())\n      .then(data => {\n        \n        \n        data.forEach((entry) => {\n          entry.favorite = false;\n        })\n\n        if (!localStorage.getItem('favorites')) {\n            let favorites = [];\n            localStorage.setItem('favorites', JSON.stringify(favorites));\n        }\n        \n        const favorites = JSON.parse(localStorage.getItem('favorites'))\n        \n        favorites.forEach((favorite) => {\n            data.forEach((country) => {\n                \n                if (favorite === country.country) {\n                    country.favorite = true;\n                }\n            })\n        })\n        const tableData = sortData(data);\n        this.setState({tableData})\n\n      })\n    }\n    \n    componentDidMount() {\n        this.getCountriesData();\n    }\n  \n    \n    setAsFav = (country) => {\n        \n        return () => {\n            const favorites = JSON.parse(localStorage.getItem('favorites'))\n            favorites.push(country)\n\n            localStorage.setItem('favorites', JSON.stringify(favorites))\n            \n            let { tableData } = this.state\n            tableData.forEach((item) => {\n                if (item.country === country) {\n                    \n                    item.favorite = !item.favorite\n                } \n            })\n            tableData = sortData(tableData)\n            this.setState({tableData});\n        }\n    }\n\n    \n    render() {\n        const {tableData} = this.state\n        \n        return (\n            <div className=\"table\">\n                {tableData.map(({ country, cases, countryInfo, favorite }) => (\n                    <tr key={country}>\n                        <td>\n                            <div className=\"flag-info\">\n                                <img src={countryInfo.flag} style={{height:\"26px\", width:\"38px\"}}/>\n                            </div>\n                        </td>\n                        <td>\n                            <div>\n                                <img src={favorite ? filledHeart : emptyHeart} onClick={this.setAsFav(country)}/>\n                            </div>\n                        </td>\n                        <td>{country}</td>\n                        <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n                    </tr>\n                ))}\n            </div>\n        )\n    }\n}\n\n\n\n\nexport default Table\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#de6b23\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType=\"cases\", ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: casesTypeColors[casesType].hex,\n                borderColor: casesTypeColors[casesType].half_op,\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;","import React, { useState, useEffect } from 'react';\nimport { Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from '../components/InfoBox/InfoBox.js';\nimport Table from '../components/Table/Table.js';\nimport LineGraph from './LineGraph';\nimport { prettyPrintStat } from './util';\n\nexport default function Graph() {\n    const [countryInfo, setCountryInfo] = useState({});\n    const [casesType, setCasesType] = useState(\"cases\");\n\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(resp => resp.json())\n    .then(data => {\n      setCountryInfo(data);\n    })\n  }, [])\n\n \n\n  \n\n   return (\n      <div>\n\n            <div className=\"app_stats\">\n            <InfoBox active={casesType === \"cases\"} onClick={e => setCasesType('cases')} title=\"Active Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\n\n            <InfoBox active={casesType === \"recovered\"} onClick={e => setCasesType('recovered')} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}/>\n\n            <InfoBox active={casesType === \"deaths\"} onClick={e => setCasesType('deaths')} title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\n            </div>\n        <div>\n            <Card className=\"app_right\">\n                <CardContent>\n                    <h3>Live Cases by Country</h3>\n                <Table />\n                    <h3>Worldwide new {casesType}</h3>\n                <LineGraph className=\"app_graph\" casesType={casesType}/>\n                </CardContent>\n            </Card>\n        </div>\n      </div>\n  )\n}\n\n","import React, { useState, useEffect } from 'react';\nimport './App.css'\nimport Nav from './components/Nav';\nimport Home from './components/Home';\nimport About from './components/About';\nimport Tracker from './components/Tracker/Tracker';\nimport Graph from './components/Graph';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\n\nfunction App() { \n  \n  return (\n    <Router>\n        <div>\n          <Nav/>\n        </div>\n      <div className=\"app\">\n        <Switch>\n          <Route path=\"/\" exact component={Home}/>\n          <Route path=\"/about\" component={About}/>\n          <Route path=\"/tracker\" component={Tracker}/>\n          <Route path=\"/graph\" component={Graph}/>\n        </Switch>\n        \n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/covid-19.4b69b94a.png\";","module.exports = __webpack_public_path__ + \"static/media/CovidVault.650b82f2.png\";","module.exports = __webpack_public_path__ + \"static/media/me.897083e4.jpg\";"],"sourceRoot":""}